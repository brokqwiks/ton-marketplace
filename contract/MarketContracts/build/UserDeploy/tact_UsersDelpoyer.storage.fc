;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_body_to_value_mode_code_data(cell body, slice to, int value, int mode, cell code, cell data) inline {
    return (true, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: DeployUser
;; Header: 0x484b9977
;; TLB: deploy_user#484b9977 publicKey:^string = DeployUser
;;

(slice, ((slice))) $DeployUser$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1212914039);
    var v'publicKey = sc_0~load_ref().begin_parse();
    return (sc_0, (v'publicKey));
}

;;
;; Type: UpdateUserPublicKey
;; Header: 0xfeb00723
;; TLB: update_user_public_key#feb00723 publicKey:^string sender:address = UpdateUserPublicKey
;;

builder $UpdateUserPublicKey$_store(builder build_0, (slice, slice) v) inline {
    var (v'publicKey, v'sender) = v;
    build_0 = store_uint(build_0, 4272949027, 32);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'publicKey).end_cell());
    build_0 = __tact_store_address(build_0, v'sender);
    return build_0;
}

cell $UpdateUserPublicKey$_store_cell((slice, slice) v) inline {
    return $UpdateUserPublicKey$_store(begin_cell(), v).end_cell();
}

((slice, slice)) $UpdateUserPublicKey$_constructor_publicKey_sender(slice publicKey, slice sender) inline {
    return (publicKey, sender);
}

;;
;; Type: UpdateUserPublicKey_Responce
;; Header: 0xaa4a7fb9
;; TLB: update_user_public_key_responce#aa4a7fb9 updated:bool sender:address = UpdateUserPublicKey_Responce
;;

builder $UpdateUserPublicKey_Responce$_store(builder build_0, (int, slice) v) inline {
    var (v'updated, v'sender) = v;
    build_0 = store_uint(build_0, 2857009081, 32);
    build_0 = build_0.store_int(v'updated, 1);
    build_0 = __tact_store_address(build_0, v'sender);
    return build_0;
}

cell $UpdateUserPublicKey_Responce$_store_cell((int, slice) v) inline {
    return $UpdateUserPublicKey_Responce$_store(begin_cell(), v).end_cell();
}

((int, slice)) $UpdateUserPublicKey_Responce$_constructor_updated_sender(int updated, slice sender) inline {
    return (updated, sender);
}

;;
;; Type: UserData
;;

builder $UserData$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'parent) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(cell, cell) $UserData$_init_child(cell sys', slice $owner, slice $parent) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: UserData
    cell mine = __tact_dict_get_code(source, 10761);
    contracts = __tact_dict_set_code(contracts, 10761, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $UserData$init$_store(b, ($owner, $parent));
    return (mine, b.end_cell());
}

;;
;; Type: UsersDelpoyer
;;

builder $UsersDelpoyer$_store(builder build_0, (slice, int) v) inline {
    var (v'name, v'users) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_uint(v'users, 256);
    return build_0;
}

(slice, ((slice, int))) $UsersDelpoyer$_load(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    var v'users = sc_0~load_uint(256);
    return (sc_0, (v'name, v'users));
}

(slice, ((slice))) $UsersDelpoyer$init$_load(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    return (sc_0, (v'name));
}

(slice, int) $UsersDelpoyer$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$UsersDelpoyer$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice name) = $sc~$UsersDelpoyer$init$_load();
        $sc.end_parse();
        return $UsersDelpoyer$_contract_init(name);
    }
}

() $UsersDelpoyer$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $UsersDelpoyer$_store(b, v);
    set_data(b.end_cell());
}